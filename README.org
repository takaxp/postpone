#+TITLE: postpone

Control boot sequence by a postpone trick.

* Introduction

I do NOT want to use ~after-init-hook~ for configuring some settings or calling functions since it makes Emacs booting so heavy. In order to reduce our stress, some activities while booting up can be =postponed= after the first user's action in Emacs. This package provides such =postpone= capability in three approaches.

This package provides a simple loading mechanism of packages with some delay. The normal function `resuire' loads packages when it is evaluated. But if you introduce this minor mode, the associated packages with this mode will be loaded just when you type something for the first time after booting your Emacs. So the loading of associated packages is postponed until you actually start to use Emacs.

* Basic configuration

Put the following code into your init.el. Just copy and paste :)

#+BEGIN_SRC emacs-lisp
(if (not (locate-library "postpone"))
    (message "postpone.el is NOT installed.")
  (autoload 'postpone-kicker "postpone" nil t)
  (defun my:postpone-kicker ()
    (interactive)
    (unless (memq this-command ;; specify commands for exclusion
                  '(self-insert-command
                    save-buffers-kill-terminal
                    exit-minibuffer))
      (postpone-kicker 'my:postpone-kicker)))
  (add-hook 'pre-command-hook #'my:postpone-kicker))
#+END_SRC

** Record initialization time

=M-x postpone-init-time= will report the initialization time to read postponed settings if the following code is applied in your init.el.

#+begin_src emacs-lisp
(if (not (locate-library "postpone"))
    (message "postpone.el is NOT installed.")
  (autoload 'postpone-kicker "postpone" nil t)
  (defun my-postpone-kicker ()
    (interactive)
    (unless (memq this-command ;; specify commands for exclusion
                  '(self-insert-command
                    save-buffers-kill-terminal
                    exit-minibuffer))
      (message "Activating postponed packages...")
      (let ((t1 (current-time)))
        (postpone-kicker 'my-postpone-kicker)
        (setq postpone-init-time (float-time
                                  (time-subtract (current-time) t1))))
      (message "Activating postponed packages...done")))
  (add-hook 'pre-command-hook #'my-postpone-kicker))
#+end_src

* Three approaches
** postpone-mode-hook

#+BEGIN_SRC emacs-lisp
(add-hook 'postpone-mode-hook #'(lambda () (message "Any functions")))
#+END_SRC

** with-eval-after-load

#+BEGIN_SRC emacs-lisp
(with-eval-after-load "postpone"
  ;; Any configurations
  (setq val1 t))
#+END_SRC

** postpone-package-list

#+BEGIN_SRC emacs-lisp
(add-to-list 'postpone-package-list 'org)
(add-to-list 'postpone-package-list 'helm-config)
#+END_SRC

